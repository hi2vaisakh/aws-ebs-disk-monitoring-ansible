---
- name: Assume cross-account roles and discover EC2 instances in target region
  hosts: localhost
  gather_facts: false
  vars:
    # Use a different variable name to avoid recursion
    target_region: "{{ aws_region | default('ap-northeast-1') }}"
    account_creds: {}
  tasks:
    - name: Assume role for each account to get temporary credentials
      community.aws.sts_assume_role:
        role_arn: "{{ item.role_arn }}"
        role_session_name: "AnsibleSession"
        duration_seconds: 900
      loop: "{{ aws_accounts }}"
      register: assume_results

    - name: Debug assume role results
      debug:
        var: assume_results.results

    - name: Build dictionary of credentials keyed by role ARN
      set_fact:
        account_creds: "{{ account_creds | combine({ item.invocation.module_args.role_arn: {
                                        'access_key': item.sts_creds.access_key,
                                        'secret_key': item.sts_creds.secret_key,
                                        'session_token': item.sts_creds.session_token } }) }}"
      loop: "{{ assume_results.results }}"

    - name: Gather EC2 instance info for each account using assumed credentials
      community.aws.ec2_instance_info:
        region: "{{ target_region }}"
        access_key: "{{ account_creds[item.role_arn].access_key }}"
        secret_key: "{{ account_creds[item.role_arn].secret_key }}"
        session_token: "{{ account_creds[item.role_arn].session_token }}"
        filters:
          "tag:ansible": "yes"
          instance-state-name: running
      loop: "{{ aws_accounts }}"
      register: ec2_info_results

    - name: Combine all discovered instances into a single list
      set_fact:
        all_instances: "{{ ec2_info_results.results | map(attribute='instances') | list | flatten }}"

    - name: Add discovered instances to dynamic inventory
      add_host:
        name: "{{ item.instance_id }}"
        groups: discovered
        ansible_connection: aws_ssm
        ansible_aws_ssm_target: "{{ item.instance_id }}"
        ansible_aws_ssm_region: "{{ target_region }}"
        ansible_user: "ec2-user"
        ansible_aws_ssm_bucket_name: "{{ ssm_bucket }}"
        ansible_aws_ssm_bucket_region: "{{ target_region }}"
        ansible_aws_ssm_bucket_endpoint_url: "https://{{ ssm_bucket }}.s3-{{ target_region }}.amazonaws.com"
        ansible_python_interpreter: "/usr/bin/python3"
      loop: "{{ all_instances }}"

- name: Gather Disk Utilization from Discovered Hosts via SSM
  hosts: discovered
  gather_facts: false
  tasks:
    - name: Run df command on remote host
      shell: "df -h --output=source,fstype,size,used,avail,pcent,target -x tmpfs -x devtmpfs | tail -n +2"
      register: disk_usage
      changed_when: false

    - name: Parse disk usage output into structured data
      set_fact:
        disk_metrics: "{{ disk_metrics | default([]) + [ {
                          'filesystem': parts[0],
                          'fstype': parts[1],
                          'size': parts[2],
                          'used': parts[3],
                          'avail': parts[4],
                          'pcent': parts[5],
                          'mountpoint': parts[6]
                        } ] }}"
      vars:
        parts: "{{ (item | regex_replace('\\s+', ' ')).split(' ') }}"
      loop: "{{ disk_usage.stdout_lines }}"

    - name: Set host disk report fact
      set_fact:
        host_disk_report:
          hostname: "{{ inventory_hostname }}"
          disk: "{{ disk_metrics }}"

- name: Aggregate Disk Utilization Reports on Localhost
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Collect reports from all discovered hosts
      set_fact:
        report: "{{ report | default({}) | combine({ item.key: item.value.host_disk_report }) }}"
      loop: "{{ hostvars | dict2items }}"
      when: item.value.host_disk_report is defined

    - name: Write aggregated disk utilization report to file
      ansible.builtin.copy:
        content: "{{ report | to_nice_json }}"
        dest: "./aggregated_disk_usage.json"
    - name: Upload aggregated disk utilization report to S3
      amazon.aws.aws_s3:
        bucket: "{{ ssm_bucket }}"
        object: "aggregated_disk_usage.json"
        src: "./aggregated_disk_usage.json"
        mode: put
        region: "{{ target_region | default(aws_region) }}"    

